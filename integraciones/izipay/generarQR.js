// File: integraciones/izipay/generarQR.js
const axios = require('axios');
const crypto = require('crypto');
const pbkdf2 = require('pbkdf2');
const moment = require('moment');
const { v4: uuidv4 } = require('uuid');

// üîÑ ACTIVADOR DE DATOS EST√ÅTICOS (col√≥calo arriba del todo)
const USAR_DATOS_ESTATICOS = true;

// üìå Datos est√°ticos de prueba (literal de la imagen)
const RESPUESTA_ESTATICA = {
  respuesta_codigo: "00",
  respuesta_mensaje: "Realizado",
  identificarQR: "8756944202204111551411",
  datos: `89504E470D0A1A0A0000000D4948445200000320000003200100000000F30B3BC5000006CF49444
15478DAEDDD418E62390CC6F120162CEB081C85A3C1D1EA281C81250B54997A2FB1FD25F0A8524B
33D2B4FF6C9A42F4FBB18A123BB64BFD0F5E05040404040404040404040404040404040404040404
0404E47F88147B1DD63F2F1FFDD37D7C6179FB554EF7B2BCBD945DFBFC51CECBA7ED8FE5D34F7BD
20E04042437726CFF7E1EFC6DFD7EDCB13FA33DB9DAE3DAA7DFAF7ADDAF3F687D72A33FDBCFAC3
7101090ECC8635D6E96AF2CFFF1FB8F53FBB42F4DED0BC59EBC3C637D5C7C5AFD09CB9F671010109
0F8CA7EFCB47BCB7AB4EE9996B7EB96E85E644BB4FEA01B080808C8ABB5EBFBDD87EF78D68D5219
5F7B3B8AADC837BDEE9996FF56414040409E4F5A259E1C27AD956E41195FC68693D6F285737BC26F
8E732020207F3D127161DDDBFCC9DB5F059F414040FE7A64783D624B14BBA31E9FE999A7CB473B5
EF5D7B2B84596EA57A972101090BF1CB1E5A6EF83CA879FBF3CDD54D633553F69D59B3F794942F5B
08E7D7ADDAB0702029212F183547F5C8DB5CBE86AE72F4B37F5B8F0B2B82DBFE2D8D62E4B588180
8080D83949FF6329717A1A2FC74C011C0B06AFA929FF152020208911CD105DFBDA35DC9399CE5F67
4D68CB3EE84B6FCF808080A4468EFD19873A24961EB651B22F7E460981E7987A2CA7DFC46BABDF19
0404243BA26B57DBFCF8E5988800B78D92446DEC2AAF9EB4CA1C22060101C98944F8C5BD4821499
2BA8E615FBB9477885F11C736101090CC88AE52C747AC520F3B74F9A79B59ECEBDEEA066C7704020
2921BF1A08CAD47764F662C47FA9CF2D51EECF1DCB6058E4140407223DA72C196A67B9CB4C6E355
AC525ECF389CB4AC06090404243332446D62198B2D910683ADE5C2414F5A2D9C2C25D53B101090D
4C88BD393C685A77493C472FCC9ED57AC3FD3DB33808080A446FCD2AEDF7239447CC6F64CCF15D3
0FAB8DD6A8CD750F0202921EF10C9105788BEF8E6AD5D267AB4CEA11E08816FBDAF573850008084
80E64B8EAEF150271FEAA559726EB4657A6FFE685475BC7391010902CC810738936DB7239461F176F
8FD2E4B26A4B6E101090F448E9FBA0439D6EFD5B58474F5A5126DDF74C76E892703208080848EC78
FC78D596B1180A12F7772F72D28A088F97236D758E010101C983B42A68AF05D0BE735350269E3C9E
B42CF9FDAEC50308084822C4AFC9DD876697B6E36957EA7C6A8834B994CE96E338A3AD3E7720202
0499016F62D76B5457B32487CA63C77B67CCC1502A54F05B8ED4040405223D37A64DDE8AEFB17ED
1924186C519BF1FEEE7619020808481EC48232964D2AD2F4A9F76C91C98851B938DFCFDB45C1E30E
04042435322D4D36C2AC7AA77F09CABC991A12634540404040F67190925E51D1614EBF309DB4229
C5CDE9FB44040403221476F46E9F777C751F2B1519AE7C7DF9EB2D8F57D674B1010900CC88BB1433
58E5775983524CBD85C581013E8B71A528180806441A44194151E793BCBA1EF5C91BA22E9BE10CDA
44EC3420802029216996A14FD6D19BAF75BB438B644524D2049A8B2D57D010404240F320F0591A9
42D17DE13C9DBF5EF68A3AD51F2EF6818080E440E4CE9DCF4B1CE638DBE3ACC965F1CAC5329DB4B
6CBA44140403221B6349DAA76EF9F324F56E578F56A82298B5DA5BABA80808024478EDEC945DA28
D8A716D689D69775A20F633E6ABB42000404240BE22B8FDCFA8FD6B89E848A835419FA4A9DA2E07
1FE020808485AC40B00ECD6BF5DA9BB49FB16599AA2FFFF6DE7119E291F05020292198989AC9A4D9
250CDF5A97D4B19A2363AB8E8FA26A7050202920519E3C2AFBB2F78126A1877761E2F03FF74D2020
1014983788BCA618A624C959FD2DC12EC9926B2C69845101090D488ED78CA5331517454B8484174
6F57379EB4A405DDDBD1242020202990129B1F4F21BD1AF43CD415791FEE218B0D0202022259ECB
130319AE06A1163ADF1F6315608BC9F1A020202920AA94F8D18EEF3FCF88BD1552FC74C534364DC1
908084866C4BEAD1502B5CA08338DF0440CD96A90E649D0757B340908084812446B01222823B500
F3FD5DEDBE10F9A8C88383808080146DDFE2DDE8BC0A5A878294A136BAD6A7CE96D1B90E040424
2DA29F493FDC18CEAA4341E2CA8C67B1A5A94BAD3ABD150404242BE2AB8EAD5D5FD67CBB6AD3FF
616A88D402F4EE0BE7F12D0808486AE4E87B9BA74BBB5F11D6D90D81E3716A887C61B3FB0208084
82644F2D525A628461BDD634C64B571675316FB17534340404072229A8E96CE96522CE0A313E793D
6477DDB820E0404242BD2BB55C6E8C45EA3E88163E9FA3264B1ED06F015040404444E5ADE15EA1E
775F0E3E65D5CA15CBAB0A012F2100010101798A0B575DC6E47AAE77B694B54B9AFE7B8BA952404
0407223FFE60B040404040404040404040404040404040404040404040404647CFD03FE27100F34CA
0CCD0000000049454E44AE426082`
};

// üîê Genera el hash PBKDF2 requerido por el header Authorization
function generarPBKDF2(secret, fecha) {
  return pbkdf2.pbkdf2Sync(secret, fecha + fecha, 5, 64, 'sha1').toString('hex');
}

// üîè Genera la firma SHA-512 usando dataFirma, apikey e idunico
function generarFirma(dataFirma, apikey, idunico) {
  const data = dataFirma + apikey + idunico;
  return crypto.createHash('sha512').update(data).digest('hex');
}

// üöÄ Genera un nuevo QR usando la API de IZIPAY o datos est√°ticos si est√° activado
async function generarQR({ db, datos, headers }) {
  // üß† 1. L√≥gica original intacta
const { dominio, subdominio, local_id, integracion, monto, user_agent, ip_cliente, origen } = datos;
const filtro = { dominio, subdominio, local_id, integracion, estado: 'activo' };
console.log('[Buscando credenciales con]', filtro);
const cred = await db.collection('apikeys').findOne(filtro);
  if (!cred) throw new Error('Credenciales no encontradas');

  const fechaHora = moment().format('YYYYMMDDHHmmssSS');
  const numPedido = uuidv4().replace(/-/g, '').substring(0, 20);
  const identificarQR = `${cred.codComercio}${fechaHora}`;

  const dataFirma = `${cred.codComercio}12${monto}604${''}${''}IZIPAYVIR${fechaHora}`;

  const httpHeaders = {
    'Content-Type': 'application/json; charset=utf-8',
    'Authorization': generarPBKDF2(cred.pbkdf2_secret, fechaHora),
    'apikey': cred.apikey,
    'firma': generarFirma(dataFirma, cred.apikey, cred.idunico),
    'idunico': cred.idunico,
    'fechahora': fechaHora
  };

  const body = {
    codComercio: cred.codComercio,
    tipo_qr: 12,
    monto,
    moneda: 604,
    tipoDeTerminal: 'IZIPAYVIR',
    flag_App: 3,
    fechaExp: moment().add(10, 'minutes').toISOString(),
    versionapp: 'v1-node-integration',
    identificarQR
  };

  // ‚úÖ 2. Si est√° activado el modo de prueba, no hacemos llamada HTTP, pero seguimos todo igual
  let qrHex = '';
if (USAR_DATOS_ESTATICOS) {
  return RESPUESTA_ESTATICA;
} else {
  try {
    const response = await axios.post(
      'https://testizivirtual.izipay.pe:9443/WebAppOperaciones/api/appmovil/generarQR',
      body,
      { headers: httpHeaders }
    );
    qrHex = response.data.datos || '';
  } catch (err) {
    console.error('[‚ùå Error real en petici√≥n a Izipay]', err.response?.data || err.message);
    throw new Error('Fallo al comunicarse con Izipay');
  }
}


  const trx = {
    dominio,
    subdominio,
    local_id,
    integracion,
    monto,
    moneda: 604,
    estado: 'pendiente',
    numPedido,
    identificarQR,
    fecha_creacion: new Date(),
    fecha_actualizacion: new Date(),
    user_agent,
    ip_cliente,
    origen,
    datos_qr: {
      imagen_hex: qrHex
    }
  };

  await db.collection('transacciones_qr').insertOne(trx);

  if (USAR_DATOS_ESTATICOS) {
  return {
    qr_hex: RESPUESTA_ESTATICA.datos,
    identificarQR: RESPUESTA_ESTATICA.identificarQR,
    numPedido: "QR-DEMO-STATIC"
  };
}

return {
  qr_hex: qrHex,
  identificarQR,
  numPedido
};

}


module.exports = { generarQR };
